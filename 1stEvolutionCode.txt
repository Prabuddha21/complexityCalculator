

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author asus
 */
public class controlStructMain extends javax.swing.JFrame {
        
    /**
     * Creates new form controlStructMain
     */
    public controlStructMain() {
        initComponents();
    }

    /**
     * This method is3333 called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 565, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        int i =0;
        int j = 0;
        int ifCount = 0;
        int whileCount = 0;
        int forCount =0;
        int caseCount =0;
        int dowhile =0;
        int catchCount =0;
        int conditionControlWeight =0;
        int whileContWeight =0;
        int doContWeight =0;
        int iterativeControlWeight =0;
        
         int andCount =0;
         int orCount =0;
         
         int wAndCount =0;
         int wOrCount =0;
         
         int dAndCount =0;
         int dOrCount =0;
        
        try {
            
            List<String> alllines = Files.readAllLines(Paths.get("C:/Users/Asus/Desktop/sampleCode.txt"));
            
            for(String line : alllines){

                line = line.replaceAll("\\s+", "");
                 //System.out.println(line);
                char [] lineChar;
                    
                    //count if count
                    if(line.contains("if")){
                                                
                        lineChar = line.toCharArray();
                        int arrayLen = lineChar.length;
                                              
                        
                        for(i=0; i<arrayLen; i++){
                            if('i' == lineChar[i] && 'f' == lineChar[i+1] && '(' == lineChar[i+2]){
                                ifCount = ifCount+1;
                            }
                            if('&' == lineChar[i] && '&' == lineChar[i+1]){
                                    andCount = andCount+1;
                                }
                            else if('|' == lineChar[i] && '|' == lineChar[i+1]){
                                    orCount = orCount+1;
                            }    
                            
                        }
                        
                        //count whole condition controller structure weight
                        conditionControlWeight = (ifCount + andCount + orCount);
                            
                    }
                    
                    //count while count
                    else if(line.contains("while")){
                        lineChar = line.toCharArray();
                        int arrayLen = lineChar.length;
                                            
                        
                        for(i=0; i<arrayLen; i++){
                            
                            if('w' == lineChar[i] && 'h' == lineChar[i+1] && 'i' == lineChar[i+2] && 'l' == lineChar[i+3] && 'e' == lineChar[i+4] && '{' == lineChar[lineChar.length -1]){
                                whileCount =whileCount+1;
                            }
                            if('&' == lineChar[i] && '&' == lineChar[i+1]){
                                    wAndCount = wAndCount+1;
                                }
                            else if('|' == lineChar[i] && '|' == lineChar[i+1]){
                                    wOrCount = wOrCount+1;
                            } 
                        }
                        
                        //count whole weight of while loops
                        whileContWeight = (whileCount + wAndCount + wOrCount);
                        
                    }
                    
                    //count switch-case count
                    else if(line.contains("case")){
                        caseCount = caseCount+1;                
                    }
                    
                    //count try-catch count
                    else if(line.contains("catch")){
                                                
                        lineChar = line.toCharArray();
                        int arrayLen = lineChar.length;
                        
                        for(i=0; i<arrayLen; i++){
                            if('c' == lineChar[i] && 'a' == lineChar[i+1] && 't' == lineChar[i+2] && 'c' == lineChar[i+3] && 'h' == lineChar[i+4] && '(' == lineChar[i+5]){
                                catchCount = catchCount+1;
                            }
                        }
                    }
                    
                    //count do-while count
                    else if(line.contains("do")){
                                                
                        lineChar = line.toCharArray();
                        int arrayLen = lineChar.length;
                        
                        for(i=0; i<arrayLen; i++){
                            if('d' == lineChar[i] && 'o' == lineChar[i+1] && '{' == lineChar[i+2]){
                                dowhile = dowhile+1;
                            }
                            if('&' == lineChar[i] && '&' == lineChar[i+1]){
                                    dAndCount = dAndCount+1;
                                }
                            else if('|' == lineChar[i] && '|' == lineChar[i+1]){
                                    dOrCount = dOrCount+1;
                            } 
                        }
                                               
                        //count whole weight of do-while loops
                        doContWeight = (dowhile + dAndCount + dOrCount);
                    }  
                    
                    
                    //count for loops count
                    else if(line.contains("for")){
                                                
                        lineChar = line.toCharArray();
                        int arrayLen = lineChar.length;
                                                
                        for(i=0; i<arrayLen; i++){
                            if('f' == lineChar[i] && 'o' == lineChar[i+1] && 'r' == lineChar[i+2] && '(' == lineChar[i+3]){
                                forCount = forCount+1;
                            }
                             
                        }
                                                
                    }
              
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        //count Iteative contol weight count
        iterativeControlWeight = (doContWeight + whileContWeight + forCount);
                
        System.out.println("Weight of Condition Control structures =" + conditionControlWeight);
        System.out.println("Weight of Iterative control structures =" + iterativeControlWeight);
        System.out.println("Weight of try-catch statements =" + catchCount);
        System.out.println("Weight of switch-case statements =" + caseCount);
        
        System.out.println(ifCount +" If statements with " +andCount+ " && operators and " +orCount+ " || opertaors" );
        System.out.println(whileContWeight+ " while loops");
        System.out.println(forCount+ " for loops");
        System.out.println(dowhile+ " do-while loops");
        
        
        
        
        
        
        //</editor-fold
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new controlStructMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    // End of variables declaration                   
}
